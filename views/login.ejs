<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <link rel="stylesheet" href="/styles/style.css">
    <title>Login</title>
</head>

<body>

    <div class="container" id="container">
        <!-- Signup Form -->
        <div class="form-container sign-up">
            <form action="/signup" method="POST">
                <h1>Registration</h1>
                <span>Use your email for registration</span>
                <input type="text" id="name" name="username" placeholder="Name" required 
                        pattern="[A-Za-z\s]+" title="Name should only contain letters and spaces.">
                <input type="email" id="email-signup" name="email" placeholder="Email" required 
                        pattern="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$" title="Please enter a valid email address.">
                <input type="password" id="password-signup" name="password" placeholder="Password" required 
                        pattern=".{8,}" title="Password must be at least 8 characters long.">
                <input type="password" id="confirm-password" name="confirmPassword" placeholder="Confirm Password" required 
                        pattern=".{8,}" title="Password must be at least 8 characters long.">
                <input type="text" id="roll-number" name="rollnumber" placeholder="Roll Number" required 
                        pattern="[A-Za-z0-9]+" title="Roll number can only contain letters and numbers.">
                <input type="tel" id="mobile-number" name="mobile" placeholder="Mobile Number" required 
                        pattern="[0-9]{10}" title="Mobile number must be exactly 10 digits.">
                <input type="text" id="course" name="course" placeholder="Course Name" required 
                        pattern="[A-Za-z\s]+" title="Course name should only contain letters and spaces.">
                <input type="text" id="college" name="college" placeholder="College Name" required 
                        pattern="[A-Za-z\s]+" title="College name should only contain letters and spaces.">
                
                <button type="submit">Sign Up</button>
            </form>
        </div>

        <!-- Signin Form -->
        <div class="form-container sign-in">
            <form action="/login" method="POST">
                <h1>Sign In</h1>
                <span>or use your email and password</span>

                <input type="email" id="email" name="email" placeholder="Email" required>
                <input type="password" id="password" name="password" placeholder="Password" required>

                <button type="submit">Sign In</button>
            </form>
        </div>

        <!-- Toggle between sign up and sign in -->
        <div class="toggle-container">
            <div class="toggle">
                <div class="toggle-panel toggle-left">
                    <h1>Welcome Back!</h1>
                    <p>Already registered? Click Sign In</p>
                    <button class="hidden" id="login">Sign In</button>
                </div>
                <div class="toggle-panel toggle-right">
                    <h1>Welcome, Students!</h1>
                    <p>New to our website? Click Sign Up to register</p>
                    <button class="hidden" id="register">Sign Up</button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        const container = document.getElementById('container');
const registerBtn = document.getElementById('register');
const loginBtn = document.getElementById('login');

// Show signup form
registerBtn.addEventListener('click', () => {
    container.classList.add("active");
});

// Show login form
loginBtn.addEventListener('click', () => {
    container.classList.remove("active");
});
// Signup Form Handling
document.querySelector('.sign-up form').addEventListener('submit', async (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);
    const data = Object.fromEntries(formData);
    
    const response = await fetch('/signup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
    });

    const result = await response.json();
    alert(result.message);
    if (result.success) {
        container.classList.remove("active");  // Show login form
    }
});

// Login Form Handling
document.querySelector('.sign-in form').addEventListener('submit', async (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);
    const data = Object.fromEntries(formData);
    
    const response = await fetch('/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
    });

    const result = await response.json();
    alert(result.message);
    if (result.success) {
        window.location.href = "/";  // Redirect to dashboard
    }
});
function validateInput(input) {
    const pattern = new RegExp(input.pattern);
    const errorMessage = input.title;
    const errorElement = input.nextElementSibling; // Assuming error message element comes right after the input

    if (pattern.test(input.value)) {
        errorElement.textContent = ""; // Clear the error message
        input.classList.remove("invalid");
    } else {
        errorElement.textContent = errorMessage;
        input.classList.add("invalid");
    }
}

// Attach event listeners to all inputs for real-time validation
document.querySelectorAll('input').forEach(input => {
    // Create an error message element dynamically
    const errorElement = document.createElement("span");
    errorElement.className = "error-message";
    input.parentNode.insertBefore(errorElement, input.nextSibling);

    // Add event listeners for 'input' and 'blur' events
    input.addEventListener('input', () => validateInput(input));
    input.addEventListener('blur', () => validateInput(input));
});

// Password and Confirm Password Matching
const passwordInput = document.getElementById('password-signup');
const confirmPasswordInput = document.getElementById('confirm-password');
const confirmPasswordError = document.createElement("span");
confirmPasswordError.className = "error-message";
confirmPasswordInput.parentNode.insertBefore(confirmPasswordError, confirmPasswordInput.nextSibling);

confirmPasswordInput.addEventListener('input', () => {
    if (confirmPasswordInput.value !== passwordInput.value) {
        confirmPasswordError.textContent = "Passwords do not match.";
        confirmPasswordInput.classList.add("invalid");
    } else {
        confirmPasswordError.textContent = "";
        confirmPasswordInput.classList.remove("invalid");
    }
});


    </script>
</body>

</html>
